## Subsetting and sorting
set.seed(13435)
#Create data frame with three variables
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
# X
  var1 var2 var3
1    2    8   15
2    3    7   12
3    5    6   14
4    1   10   11
5    4    9   13
X <- X[sample(1:5), ] # what does it do?
# X
  var1 var2 var3
1    2    8   15
4    1   10   11
2    3    7   12
3    5    6   14
5    4    9   13
X$var2[c(1,3)] <- NA # put NA for row 1 and 3 of var2 column
# X
  var1 var2 var3
1    2   NA   15
4    1   10   11
2    3   NA   12
3    5    6   14
5    4    9   13

X[, 1] # fetches first column of data frame i.e. subsetting using column index
# [1] 2 1 3 5 4
X[, "var1"] # subsetting using column name , this also fetches first column of data frame
# [1] 2 1 3 5 4

X[1:2, "var2"] # subsetting both rows and column - this fetches 1st to 2nd row of column "var2"
# [1] NA 10

# Logical AND & OR

X[(X$var1 <= 3 & X$var3 > 11), ]
 var1 var2 var3
1    2   NA   15
2    3   NA   12

X[(X$var1 <= 3 | X$var3 > 15), ]
 var1 var2 var3
1    2   NA   15
4    1   10   11
2    3   NA   12

# Dealing with missing values
X[(X$var2 > 8), ] # this won't work since var2 has NA values
    var1 var2 var3
NA     NA   NA   NA
4       1   10   11
NA.1   NA   NA   NA
5       4    9   13
X[which(X$var2 > 8), ] # apply whhich() over the expression if the column has NA values
 var1 var2 var3
4    1   10   11
5    4    9   13

# Sorting
sort(X$var1) # sorts value of column "var1" in increasing order
[1] 1 2 3 4 5
sort(X$var1, decreasing=T) # to sort in decreasing order specify attribute decreasing = T/TRUE
[1] 5 4 3 2 1
sort(X$var2) # this won't fetch NA values
[1]  6  9 10
sort(X$var2, na.last=T) # to fetch NA values also, set na.last=TRUE
[1]  6  9 10 NA NA

# Ordering
X[order(X$var1), ] # orders the data frame by the values of column "var1"
 var1 var2 var3
4    1   10   11
1    2   NA   15
2    3   NA   12
5    4    9   13
3    5    6   14
# Ordering with multiple variables
X[order(X$var1, X$var3), ] # orders the date frame by the values of "var1" and if there multiple same values, it will sort the values of "var3" withing those rows
var1 var2 var3 # sorts the first variable first and then second variable within the first variable
4    1   10   11
1    2   NA   15
2    3   NA   12
5    4    9   13
3    5    6   14
# Ordering with plyr
library(plyr)
arrange(X, var1) # arranging X by var1 in increasing order
var1 var2 var3
1    1   10   11
2    2   NA   15
3    3   NA   12
4    4    9   13
5    5    6   14
arrange(X, desc(var1)) # arranging X by var1 in decreasing order
var1 var2 var3
1    5    6   14
2    4    9   13
3    3   NA   12
4    2   NA   15
5    1   10   11

# Adding rows and columns
X$var4 <- rnorm(5)
X
var1 var2 var3       var4
1    2   NA   15  0.1875960
4    1   10   11  1.7869764
2    3   NA   12  0.4966936
3    5    6   14  0.0631830
5    4    9   13 -0.5361329

# Another way to add columns - column bind i.e. cbind()
Y <- cbind(X, rnorm(5)) # adds column on right
Y
 var1 var2 var3       var4    rnorm(5)
1    2   NA   15  0.1875960  0.62578490
4    1   10   11  1.7869764 -2.45083750
2    3   NA   12  0.4966936  0.08909424
3    5    6   14  0.0631830  0.47838570
5    4    9   13 -0.5361329  1.00053336

Z <- cbind(rnorm(5),Y) # adds column to the left
Z
   rnorm(5) var1 var2 var3       var4    rnorm(5)
1 -0.8705105    2   NA   15  0.1875960  0.62578490
4 -0.9870139    1   10   11  1.7869764 -2.45083750
2  0.3262530    3   NA   12  0.4966936  0.08909424
3 -1.1025739    5    6   14  0.0631830  0.47838570
5 -1.0105164    4    9   13 -0.5361329  1.00053336

# rbind() is used for adding rows

 A <- rbind(rnorm(6),Z) # adds row to the top
   rnorm(5)      var1      var2       var3       var4    rnorm(5)
1   0.6095613 0.5041528  1.379887  0.4906615  1.4912935 -0.18427274
11 -0.8705105 2.0000000        NA 15.0000000  0.1875960  0.62578490
4  -0.9870139 1.0000000 10.000000 11.0000000  1.7869764 -2.45083750
2   0.3262530 3.0000000        NA 12.0000000  0.4966936  0.08909424
3  -1.1025739 5.0000000  6.000000 14.0000000  0.0631830  0.47838570
5  -1.0105164 4.0000000  9.000000 13.0000000 -0.5361329  1.00053336

B <- rbind(Z,rnorm(6)) # adds row to the bottom
1 -0.8705105  2.0000000        NA 15.0000000  0.1875960  0.62578490
4 -0.9870139  1.0000000 10.000000 11.0000000  1.7869764 -2.45083750
2  0.3262530  3.0000000        NA 12.0000000  0.4966936  0.08909424
3 -1.1025739  5.0000000  6.000000 14.0000000  0.0631830  0.47838570
5 -1.0105164  4.0000000  9.000000 13.0000000 -0.5361329  1.00053336
6  0.5127249 -0.9409096 -0.380871  0.1015107  0.1731997 -0.43393468

## Summarizing data
# https://data.baltimorecity.gov/Community/Restaurants/k5ry-ef3g
getwd()
setwd("~/Desktop/Online Coursera/Coursera-Getting-and-Cleaning-Data/")
list.files()
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/restaurants.csv", method="curl")
restData <- read.csv("./data/restaurants.csv")
dim(restData)
head(restData, n=3)
tail(restData, n=3)
summary(restData)
str(restData)
quantile(restData$councilDistrict, na.rm=T)
quantile(restData$councilDistrict, probs=c(0.5, 0.75, 0.9))
table(restData$zipCode, useNA="ifany")
table(restData$councilDistrict, restData$zipCode)
# Check for missing values
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode > 0) # FALSE
colSums(is.na(restData)) # 0
all(colSums(is.na(restData))==0) # TRUE: no missing values
# Values with specific characteristics
table(restData$zipCode %in% c("21212"))
table(restData$zipCode %in% c("21212", "21213"))
restData[restData$zipCode %in% c("21212", "21213"), ]
# Cross tabs
data(UCBAdmissions)
DF <- as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
# Flat tables
warpbreaks$replicate <- rep(1:9, len = 54)
xt <- xtabs(breaks ~., data=warpbreaks)
xt
ftable(xt)
# Size of a dataset
fakeData <- rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData), units="Mb")

## Creating new variables
# Creating sequences
s1 <- seq(1, 10, by=2)
s1
s2 <- seq(1, 10, length=3)
s2
x <- c(1, 3, 8, 25, 100)
seq(along=x)
# Subsetting variables
restData$nearMe <- restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
# Creating binary variables
restData$zipWrong <- ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong, restData$zipCode < 0)
# Creating categorical variables
restData$zipGroup <- cut(restData$zipCode, breaks=quantile(restData$zipCode))
table(restData$zipGroup)
table(restData$zipGroup, restData$zipCode)
# Easier cutting
library(Hmisc)
restData$zipGroups <- cut2(restData$zipCode, g=4)
restData$zcf <- factor(restData$zipCode)
restData$zcf[1:10]
class(restData$zcf)
# Levels of factor variables
yesno <- sample(c("yes", "no"), size=10, replace=TRUE)
yesnofac <- factor(yesno, levels=c("yes", "no")) # low-level, high-level
relevel(yesnofac, ref="yes")
as.numeric(yesnofac)
# Cutting produces factor variables
library(Hmisc)
restData$zipGroups <- cut2(restData$zipCode, g=4)
table(restData$zipGroups)
# Using the mutate function
restData2 <- mutate(restData, zipGroups=cut2(zipCode, g=4))
table(restData2$zipGroups)
#[-21226,21205) [ 21205,21220) [ 21220,21227) [ 21227,21287] 
#338            375            300            314 

## Reshaping data
#
library(reshape2)
head(mtcars)
# Melting data frames
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars=c("mpg", "hp"))
head(carMelt, n=3)
tail(carMelt, n=3)
# Casting data frames
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
# Averaging values
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
# Another way - split
spIns <- split(InsectSprays$count, InsectSprays$spray)
spIns
# Another way - apply
sprCount <- lapply(spIns, sum)
sprCount
# Another way - combine
unlist(sprCount)
sapply(spIns, sum)
# Another way - plyr package
ddply(InsectSprays,.(spray), summarize, sum=sum(count))
# Creating a new variable
spraySums <- ddply(InsectSprays, .(spray), summarize, sum=ave(count, FUN=sum))
dim(spraySums)
head(spraySums)

## Merging data
fileUrl1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1, destfile="./data/reviews.csv", method="curl")
download.file(fileUrl2, destfile="./data/solutions.csv", method="curl")
reviews <- read.csv("./data/reviews.csv")
solutions <- read.csv("./data/solutions.csv")
head(reviews, 2)
head(solutions, 2)
# merge()
names(reviews) # solution_id
names(solutions) # problem_id
mergeData <- merge(reviews, solutions, by.x="solution_id", by.y="id", all=TRUE)
head(mergeData)
# merge all common column names
intersect(names(solutions), names(reviews))
mergedData2 <- merge(reviews, solutions, all=TRUE)
head(mergedData2)
# Using join in the plyr package
df1 <- data.frame(id=sample(1:10), x=rnorm(10))
df2 <- data.frame(id=sample(1:10), y=rnorm(10))
arrange(join(df1, df2), id)
# If you have multiple data fraomes
df1 <- data.frame(id=sample(1:10), x=rnorm(10))
df2 <- data.frame(id=sample(1:10), y=rnorm(10))
df3 <- data.frame(id=sample(1:10), z=rnorm(10))
dfList <- list(df1, df2, df3)
join_all(dfList)
